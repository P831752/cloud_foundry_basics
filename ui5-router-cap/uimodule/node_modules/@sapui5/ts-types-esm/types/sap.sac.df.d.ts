// For Library Version: 1.119.0

declare module "sap/sac/df/library" {}

declare module "sap/sac/df/FlexAnalysis" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import FlexAnalysisPanel from "sap/sac/df/FlexAnalysisPanel";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import SystemType from "sap/sac/df/types/SystemType";

  /**
   * @experimental
   *
   * Enables users to view, navigate and change multidimensional data exposed via InA.
   *
   * Overview:
   *
   * The user can view the data in a Table, navigate in the data via a context menu or builder panels The
   * data source that the FlexAnalysis consumes or renders has to be provided as a property value.
   */
  export default class FlexAnalysis extends Control {
    /**
     * Constructor for a new `FlexAnalysis`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string
    );

    /**
     * Creates a new subclass of class sap.sac.df.FlexAnalysis with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FlexAnalysis>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.sac.df.FlexAnalysis.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some customPanel to the aggregation {@link #getCustomPanels customPanels}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addCustomPanel(
      /**
       * The customPanel to add; if empty, nothing is inserted
       */
      oCustomPanel: FlexAnalysisPanel
    ): this;
    /**
     * Binds property {@link #getDataProvider dataProvider} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
     * of the possible properties of `oBindingInfo`
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    bindDataProvider(
      /**
       * The binding information
       */
      oBindingInfo: PropertyBindingInfo
    ): this;
    /**
     * Destroys all the customPanels in the aggregation {@link #getCustomPanels customPanels}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCustomPanels(): this;
    /**
     * Gets current value of property {@link #getAutoUpdate autoUpdate}.
     *
     * Indicates if Flexible Analysis component automatically requests the ResultSet for the shown data source
     *
     * Default value is `true`.
     *
     * @returns Value of property `autoUpdate`
     */
    getAutoUpdate(): boolean;
    /**
     * Gets current value of property {@link #getClientIdentifier clientIdentifier}.
     *
     * Client Identifier to be used for underlying InA queries
     *
     * @returns Value of property `clientIdentifier`
     */
    getClientIdentifier(): string;
    /**
     * Gets current value of property {@link #getConfigId configId}.
     *
     * configuration Id
     *
     * @returns Value of property `configId`
     */
    getConfigId(): string;
    /**
     * Gets current value of property {@link #getConfigObject configObject}.
     *
     * JSON object containing the configuration (alternative to configurationURI)
     *
     * @returns Value of property `configObject`
     */
    getConfigObject(): object;
    /**
     * Gets current value of property {@link #getConfigurationURI configurationURI}.
     *
     * URI of the advanced configuration to be fetched
     *
     * @returns Value of property `configurationURI`
     */
    getConfigurationURI(): string;
    /**
     * Gets content of aggregation {@link #getCustomPanels customPanels}.
     *
     * Custom panels for the flexible analysis control
     */
    getCustomPanels(): FlexAnalysisPanel[];
    /**
     * Gets current value of property {@link #getDataProvider dataProvider}.
     *
     * Name of the Data Provider from the corresponding MultiDimModel to be used
     *
     * @returns Value of property `dataProvider`
     */
    getDataProvider(): any;
    /**
     * Gets current value of property {@link #getDataSource dataSource}.
     *
     * Data source (Query name/ View, InA model etc) to be used to get the data from
     *
     * Default value is `"$datasource"`.
     *
     * @returns Value of property `dataSource`
     */
    getDataSource(): string;
    /**
     * Gets current value of property {@link #getEnvironment environment}.
     *
     * Additional Flag to be passed to the control TODO: Document the possibilities
     *
     * Default value is `[]`.
     *
     * @returns Value of property `environment`
     */
    getEnvironment(): string[];
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Height of the component
     *
     * Default value is `"100%"`.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getHideDesignPanel hideDesignPanel}.
     *
     * Sets if the Design Panel of FlexAnalysis is hidden
     *
     * Default value is `true`.
     *
     * @returns Value of property `hideDesignPanel`
     */
    getHideDesignPanel(): boolean;
    /**
     * Gets current value of property {@link #getHideFilterLine hideFilterLine}.
     *
     * Sets if the filter of FlexAnalysis is hidden
     *
     * Default value is `false`.
     *
     * @returns Value of property `hideFilterLine`
     */
    getHideFilterLine(): boolean;
    /**
     * Gets current value of property {@link #getHideLandingPage hideLandingPage}.
     *
     * Sets if the landing page of FlexAnalysis is hidden
     *
     * Default value is `true`.
     *
     * @returns Value of property `hideLandingPage`
     */
    getHideLandingPage(): boolean;
    /**
     * Gets current value of property {@link #getHideMenuBar hideMenuBar}.
     *
     * Sets if the menu bar of FlexAnalysis is hidden
     *
     * Default value is `true`.
     *
     * @returns Value of property `hideMenuBar`
     */
    getHideMenuBar(): boolean;
    /**
     * Gets current value of property {@link #getHideSideNavigation hideSideNavigation}.
     *
     * Sets if the side navigation bar of FlexAnalysis is hidden
     *
     * Default value is `false`.
     *
     * @returns Value of property `hideSideNavigation`
     */
    getHideSideNavigation(): boolean;
    /**
     * Gets current value of property {@link #getHideStatusBar hideStatusBar}.
     *
     * Sets if the status bar of FlexAnalysis is hidden
     *
     * Default value is `true`.
     *
     * @returns Value of property `hideStatusBar`
     */
    getHideStatusBar(): boolean;
    /**
     * Gets current value of property {@link #getHideStylePanel hideStylePanel}.
     *
     * Sets if the Style Panel of FlexAnalysis is hidden
     *
     * Default value is `true`.
     *
     * @returns Value of property `hideStylePanel`
     */
    getHideStylePanel(): boolean;
    /**
     * Gets current value of property {@link #getHideToolBar hideToolBar}.
     *
     * Sets if the toolbar of FlexAnalysis is hidden
     *
     * Default value is `true`.
     *
     * @returns Value of property `hideToolBar`
     */
    getHideToolBar(): boolean;
    /**
     * Gets current value of property {@link #getImplicitVariableHandling implicitVariableHandling}.
     *
     * Indicates if the variable are handled internal handling by FlexAnalysis. If set to false it is done via
     * corresponding MultiDimModel
     *
     * Default value is `true`.
     *
     * @returns Value of property `implicitVariableHandling`
     */
    getImplicitVariableHandling(): boolean;
    /**
     * Gets current value of property {@link #getKeepAliveInterval keepAliveInterval}.
     *
     * Interval to keep the InA session alive. values less than 1 deactivates the keep alive handling
     *
     * Default value is `0`.
     *
     * @returns Value of property `keepAliveInterval`
     */
    getKeepAliveInterval(): int;
    /**
     * Gets current value of property {@link #getMultiDimModelId multiDimModelId}.
     *
     * Id of the MultiDimModel to use
     *
     * Default value is `"om"`.
     *
     * @returns Value of property `multiDimModelId`
     */
    getMultiDimModelId(): string;
    /**
     * Gets current value of property {@link #getShowTitle showTitle}.
     *
     * Indicates Flexible Analysis component should display the component title
     *
     * Default value is `false`.
     *
     * @returns Value of property `showTitle`
     */
    getShowTitle(): boolean;
    /**
     * Gets current value of property {@link #getStyleTemplateName styleTemplateName}.
     *
     * Indicates if the variable are handled internal handling by FlexAnalysis. If set to false it is done via
     * corresponding MultiDimModel
     *
     * @returns Value of property `styleTemplateName`
     */
    getStyleTemplateName(): string;
    /**
     * Gets current value of property {@link #getSystemName systemName}.
     *
     * System to take data from. If not set or set to "local" current url will be used to determine the system
     *
     * @returns Value of property `systemName`
     */
    getSystemName(): string;
    /**
     * Gets current value of property {@link #getSystemType systemType}.
     *
     * Type the system to connect to get data
     *
     * Default value is `BW`.
     *
     * @returns Value of property `systemType`
     */
    getSystemType(): SystemType | keyof typeof SystemType;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Sets title to be shown in the control. If not set the name of the corresponding back-end query is used
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Width of the component
     *
     * Default value is `"100%"`.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.sac.df.FlexAnalysisPanel` in the aggregation {@link #getCustomPanels customPanels}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfCustomPanel(
      /**
       * The customPanel whose index is looked for
       */
      oCustomPanel: FlexAnalysisPanel
    ): int;
    /**
     * Inserts a customPanel into the aggregation {@link #getCustomPanels customPanels}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertCustomPanel(
      /**
       * The customPanel to insert; if empty, nothing is inserted
       */
      oCustomPanel: FlexAnalysisPanel,
      /**
       * The `0`-based index the customPanel should be inserted at; for a negative value of `iIndex`, the customPanel
       * is inserted at position 0; for a value greater than the current size of the aggregation, the customPanel
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getCustomPanels customPanels}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllCustomPanels(): FlexAnalysisPanel[];
    /**
     * Removes a customPanel from the aggregation {@link #getCustomPanels customPanels}.
     *
     * @returns The removed customPanel or `null`
     */
    removeCustomPanel(
      /**
       * The customPanel to remove or its index or id
       */
      vCustomPanel: int | string | FlexAnalysisPanel
    ): FlexAnalysisPanel | null;
    /**
     * Sets a new value for property {@link #getAutoUpdate autoUpdate}.
     *
     * Indicates if Flexible Analysis component automatically requests the ResultSet for the shown data source
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAutoUpdate(
      /**
       * New value for property `autoUpdate`
       */
      bAutoUpdate?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getClientIdentifier clientIdentifier}.
     *
     * Client Identifier to be used for underlying InA queries
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setClientIdentifier(
      /**
       * New value for property `clientIdentifier`
       */
      sClientIdentifier: string
    ): this;
    /**
     * Sets a new value for property {@link #getConfigId configId}.
     *
     * configuration Id
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setConfigId(
      /**
       * New value for property `configId`
       */
      sConfigId: string
    ): this;
    /**
     * Sets a new value for property {@link #getConfigObject configObject}.
     *
     * JSON object containing the configuration (alternative to configurationURI)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setConfigObject(
      /**
       * New value for property `configObject`
       */
      oConfigObject: object
    ): this;
    /**
     * Sets a new value for property {@link #getConfigurationURI configurationURI}.
     *
     * URI of the advanced configuration to be fetched
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setConfigurationURI(
      /**
       * New value for property `configurationURI`
       */
      sConfigurationURI: string
    ): this;
    /**
     * Sets a new value for property {@link #getDataProvider dataProvider}.
     *
     * Name of the Data Provider from the corresponding MultiDimModel to be used
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataProvider(
      /**
       * New value for property `dataProvider`
       */
      oDataProvider: any
    ): this;
    /**
     * Sets a new value for property {@link #getDataSource dataSource}.
     *
     * Data source (Query name/ View, InA model etc) to be used to get the data from
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"$datasource"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDataSource(
      /**
       * New value for property `dataSource`
       */
      sDataSource?: string
    ): this;
    /**
     * Sets a new value for property {@link #getEnvironment environment}.
     *
     * Additional Flag to be passed to the control TODO: Document the possibilities
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `[]`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnvironment(
      /**
       * New value for property `environment`
       */
      sEnvironment?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Height of the component
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getHideDesignPanel hideDesignPanel}.
     *
     * Sets if the Design Panel of FlexAnalysis is hidden
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHideDesignPanel(
      /**
       * New value for property `hideDesignPanel`
       */
      bHideDesignPanel?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideFilterLine hideFilterLine}.
     *
     * Sets if the filter of FlexAnalysis is hidden
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHideFilterLine(
      /**
       * New value for property `hideFilterLine`
       */
      bHideFilterLine?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideLandingPage hideLandingPage}.
     *
     * Sets if the landing page of FlexAnalysis is hidden
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHideLandingPage(
      /**
       * New value for property `hideLandingPage`
       */
      bHideLandingPage?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideMenuBar hideMenuBar}.
     *
     * Sets if the menu bar of FlexAnalysis is hidden
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHideMenuBar(
      /**
       * New value for property `hideMenuBar`
       */
      bHideMenuBar?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideSideNavigation hideSideNavigation}.
     *
     * Sets if the side navigation bar of FlexAnalysis is hidden
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHideSideNavigation(
      /**
       * New value for property `hideSideNavigation`
       */
      bHideSideNavigation?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideStatusBar hideStatusBar}.
     *
     * Sets if the status bar of FlexAnalysis is hidden
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHideStatusBar(
      /**
       * New value for property `hideStatusBar`
       */
      bHideStatusBar?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideStylePanel hideStylePanel}.
     *
     * Sets if the Style Panel of FlexAnalysis is hidden
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHideStylePanel(
      /**
       * New value for property `hideStylePanel`
       */
      bHideStylePanel?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHideToolBar hideToolBar}.
     *
     * Sets if the toolbar of FlexAnalysis is hidden
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHideToolBar(
      /**
       * New value for property `hideToolBar`
       */
      bHideToolBar?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getImplicitVariableHandling implicitVariableHandling}.
     *
     * Indicates if the variable are handled internal handling by FlexAnalysis. If set to false it is done via
     * corresponding MultiDimModel
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setImplicitVariableHandling(
      /**
       * New value for property `implicitVariableHandling`
       */
      bImplicitVariableHandling?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getKeepAliveInterval keepAliveInterval}.
     *
     * Interval to keep the InA session alive. values less than 1 deactivates the keep alive handling
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKeepAliveInterval(
      /**
       * New value for property `keepAliveInterval`
       */
      iKeepAliveInterval?: int
    ): this;
    /**
     * Sets a new value for property {@link #getMultiDimModelId multiDimModelId}.
     *
     * Id of the MultiDimModel to use
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"om"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMultiDimModelId(
      /**
       * New value for property `multiDimModelId`
       */
      sMultiDimModelId?: string
    ): this;
    /**
     * Sets a new value for property {@link #getShowTitle showTitle}.
     *
     * Indicates Flexible Analysis component should display the component title
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShowTitle(
      /**
       * New value for property `showTitle`
       */
      bShowTitle?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getStyleTemplateName styleTemplateName}.
     *
     * Indicates if the variable are handled internal handling by FlexAnalysis. If set to false it is done via
     * corresponding MultiDimModel
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setStyleTemplateName(
      /**
       * New value for property `styleTemplateName`
       */
      sStyleTemplateName: string
    ): this;
    /**
     * Sets a new value for property {@link #getSystemName systemName}.
     *
     * System to take data from. If not set or set to "local" current url will be used to determine the system
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSystemName(
      /**
       * New value for property `systemName`
       */
      sSystemName: string
    ): this;
    /**
     * Sets a new value for property {@link #getSystemType systemType}.
     *
     * Type the system to connect to get data
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `BW`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSystemType(
      /**
       * New value for property `systemType`
       */
      sSystemType?: SystemType | keyof typeof SystemType
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Sets title to be shown in the control. If not set the name of the corresponding back-end query is used
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Width of the component
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Unbinds property {@link #getDataProvider dataProvider} from model data.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    unbindDataProvider(): this;
  }

  export interface $FlexAnalysisSettings extends $ControlSettings {
    /**
     * Sets title to be shown in the control. If not set the name of the corresponding back-end query is used
     */
    title?: string | PropertyBindingInfo;

    /**
     * Indicates Flexible Analysis component should display the component title
     */
    showTitle?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Indicates if Flexible Analysis component automatically requests the ResultSet for the shown data source
     */
    autoUpdate?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * URI of the advanced configuration to be fetched
     */
    configurationURI?: string | PropertyBindingInfo;

    /**
     * JSON object containing the configuration (alternative to configurationURI)
     */
    configObject?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * configuration Id
     */
    configId?: string | PropertyBindingInfo;

    /**
     * Width of the component
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Height of the component
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Sets if the Design Panel of FlexAnalysis is hidden
     */
    hideDesignPanel?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Sets if the Style Panel of FlexAnalysis is hidden
     */
    hideStylePanel?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Sets if the menu bar of FlexAnalysis is hidden
     */
    hideMenuBar?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Sets if the status bar of FlexAnalysis is hidden
     */
    hideStatusBar?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Sets if the toolbar of FlexAnalysis is hidden
     */
    hideToolBar?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Sets if the filter of FlexAnalysis is hidden
     */
    hideFilterLine?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Sets if the side navigation bar of FlexAnalysis is hidden
     */
    hideSideNavigation?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Sets if the landing page of FlexAnalysis is hidden
     */
    hideLandingPage?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Additional Flag to be passed to the control TODO: Document the possibilities
     */
    environment?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * System to take data from. If not set or set to "local" current url will be used to determine the system
     */
    systemName?: string | PropertyBindingInfo;

    /**
     * Data source (Query name/ View, InA model etc) to be used to get the data from
     */
    dataSource?: string | PropertyBindingInfo;

    /**
     * Type the system to connect to get data
     */
    systemType?:
      | (SystemType | keyof typeof SystemType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Interval to keep the InA session alive. values less than 1 deactivates the keep alive handling
     */
    keepAliveInterval?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Client Identifier to be used for underlying InA queries
     */
    clientIdentifier?: string | PropertyBindingInfo;

    /**
     * Name of the Data Provider from the corresponding MultiDimModel to be used
     */
    dataProvider?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * Id of the MultiDimModel to use
     */
    multiDimModelId?: string | PropertyBindingInfo;

    /**
     * Indicates if the variable are handled internal handling by FlexAnalysis. If set to false it is done via
     * corresponding MultiDimModel
     */
    implicitVariableHandling?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Indicates if the variable are handled internal handling by FlexAnalysis. If set to false it is done via
     * corresponding MultiDimModel
     */
    styleTemplateName?: string | PropertyBindingInfo;

    /**
     * Custom panels for the flexible analysis control
     */
    customPanels?:
      | FlexAnalysisPanel[]
      | FlexAnalysisPanel
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/sac/df/FlexAnalysisPanel" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import Control from "sap/ui/core/Control";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @experimental
   *
   * A panel to be added into FlexAnalysis control
   */
  export default class FlexAnalysisPanel extends UI5Element {
    /**
     * Constructor for a new Flexible Analysis Panel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $FlexAnalysisPanelSettings
    );
    /**
     * Constructor for a new Flexible Analysis Panel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $FlexAnalysisPanelSettings
    );

    /**
     * Creates a new subclass of class sap.sac.df.FlexAnalysisPanel with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FlexAnalysisPanel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.sac.df.FlexAnalysisPanel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Destroys the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content of this panel
     */
    getContent(): Control;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * The description of the panel, displayed as tooltip on the side navigation item.
     *
     * @returns Value of property `description`
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * The icon of the panel, displayed on the side navigation item and the panel header.
     *
     * @returns Value of property `icon`
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * The title of the panel header.
     *
     * @returns Value of property `title`
     */
    getTitle(): string;
    /**
     * Sets the aggregated {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContent(
      /**
       * The content to set
       */
      oContent: Control
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * The description of the panel, displayed as tooltip on the side navigation item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription: string
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * The icon of the panel, displayed on the side navigation item and the panel header.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon: URI
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * The title of the panel header.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle: string
    ): this;
  }

  export interface $FlexAnalysisPanelSettings extends $ElementSettings {
    /**
     * The description of the panel, displayed as tooltip on the side navigation item.
     */
    description?: string | PropertyBindingInfo;

    /**
     * The title of the panel header.
     */
    title?: string | PropertyBindingInfo;

    /**
     * The icon of the panel, displayed on the side navigation item and the panel header.
     */
    icon?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * The content of this panel
     */
    content?: Control;
  }
}

declare module "sap/sac/df/model/AxesLayout" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @since 1.119
   * @experimental
   *
   * Axis Layout showing which dimensions are set on rows and which on columns.
   * ```javascript
   *
   * {
   *   "Rows": [],
   *   "Columns": []
   * }
   * ```
   */
  export default class AxesLayout extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.sac.df.model.AxesLayout with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, AxesLayout>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.sac.df.model.AxesLayout.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Distribute the dimension among the rows and columns
     *
     * @returns resolving to the axes layout object to allow chaining
     */
    setAxesLayout(
      /**
       * an array containing a containing the names of the dimensions on rows. The order in the array control
       * the position on the axis.
       */
      aDimensionOnRowsAxis: string[],
      /**
       * an array containing a containing the names of the dimensions on columns. The order in the array control
       * the position on the axis.
       */
      aDimensionOnColumnsAxis: string[]
    ): AxesLayout;
  }
}

declare module "sap/sac/df/model/DataProvider" {
  import BaseObject from "sap/ui/base/Object";

  import MultiDimModel from "sap/sac/df/model/MultiDimModel";

  import AxesLayout from "sap/sac/df/model/AxesLayout";

  import Dimension from "sap/sac/df/model/Dimension";

  import Grid from "sap/sac/df/model/Grid";

  import Variable from "sap/sac/df/model/Variable";

  import Metadata from "sap/ui/base/Metadata";

  import QueryInfo from "sap/sac/df/model/QueryInfo";

  /**
   * @experimental
   *
   * A `DataProvider` is a Analytical query exposed via an OLAP engine and accessed via InA protocol HANA
   * - MDS BW Query. In BW it could be done via a CDS view that is annotated as an AnalyticQuery.
   *
   * Instances of this class should only be created by the {sap.sac.df.model.MultiDimModel}. The `MultiDimModel`
   * populates it's exposed data via Binding to Controls. The structure of data exposed by a DataProvider
   * is as follows:
   *
   * **Structure of Exposed Data**
   * ```javascript
   *
   * "Name": "",
   * "QueryInfo": { },
   * "Variables": { }
   * "Dimensions": { },
   * "Measures": [ ],
   * "AxesLayout": {
   *   "Columns": [],
   *   "Rows": []
   *  },
   * "Grid": { },
   * "Messages": [ ]
   * ```
   */
  export default class DataProvider extends BaseObject {
    /**
     * Constructor for a new DataProvider.
     *
     * A DataProvider represents a navigable queryManager and allows to access and change data from servers
     * providing the InA Protocol.
     */
    constructor(
      /**
       * the model to which the DataProvider belongs
       */
      oMultiDimModel: MultiDimModel,
      /**
       * name of the DataProvider
       */
      sDataProviderName: string
    );
    /**
     * AxesLayout
     */
    AxesLayout: AxesLayout;

    /**
     * Dimensions
     */
    Dimensions: Dimension;

    /**
     * Grid
     */
    Grid: Grid;

    /**
     * Measures
     */
    Measures: /* was: sap.sac.df.model.Measure */ any;

    /**
     * Variables
     */
    Variables: Variable;

    /**
     * Creates a new subclass of class sap.sac.df.model.DataProvider with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DataProvider>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.sac.df.model.DataProvider.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Updates the MultiDimModel from the given the model state including all aggregated `DataProvider`s
     *
     * @returns Promise Promise which resolves to the updated instance of the OlapModel.
     */
    deserialize(
      /**
       * the JSON object containing the persisted state of th MultiDimModel to be applied.
       */
      oModelState: object,
      /**
       * the format be the deserialized (INA_REPOSITORY_DELTA or INA_REPOSITORY).
       */
      sFormat: string
    ): undefined;
    /**
     * Export Data
     */
    exportData(
      /**
       * data export configuration
       */
      oDataExportConfig: object
    ): void;
    /**
     * Get Axis Layout
     *
     * @returns axis layout
     */
    getAxesLayout(): AxesLayout;
    /**
     * Gets the scaling factor of a measure or data cell
     *
     * @returns the current decimal places setting
     */
    getDecimalPlaces(
      /**
       * the Member of the Measure Structure
       */
      sMeasureMember: string,
      /**
       * the Member of the Non Measure Structure, if this is not given the value for the sMeasureMember is returned
       */
      sNonMeasureMember: string
    ): int;
    /**
     * Get Dimension
     *
     * @returns a dimension object
     */
    getDimension(
      /**
       * dimension name
       */
      sDimensionName: string
    ): Dimension;
    /**
     * Get Dimensions
     *
     * @returns a dimension object
     */
    getDimensions(): Record<string, Dimension>;
    /**
     * Get Grid
     *
     * @returns grid
     */
    getGrid(): Grid;
    /**
     * Get measure
     *
     * @returns a dimension object
     */
    getMeasure(
      /**
       * measure name
       */
      sMeasureName: string
    ): /* was: sap.sac.df.model.Measure */ any;
    /**
     * Get measures
     *
     * @returns a dimension object
     */
    getMeasures(): /* was: sap.sac.df.model.Measure */ any;
    /**
     * Get Measure Structure Dimension
     *
     * @returns measure structure dimension
     */
    getMeasureStructureDimension(): Dimension;
    /**
     * Get Query Information
     *
     * @returns query information
     */
    getQueryInfo(): QueryInfo;
    /**
     * Get Result Set
     */
    getResultSet(
      /**
       * enforce result set update
       */
      bForceResultSetUpdate?: boolean
    ): void;
    /**
     * Gets the scaling factor of a measure
     *
     * @returns the exponent of the scaling factor in Base 10
     */
    getScalingFactor(
      /**
       * the Member of the Measure Structure
       */
      sMeasureMember: string,
      /**
       * the Member of the Non Measure Structure
       */
      sNonMeasureMember: string
    ): int;
    /**
     * Get Non-Measure Structure Dimension
     *
     * @returns non-measure structure dimension
     */
    getStructureDimension(): Dimension;
    /**
     * Get Variable
     *
     * @returns a variable object
     */
    getVariable(
      /**
       * variable name
       */
      sVariableName: string
    ): Variable;
    /**
     * Get Variables
     *
     * @returns a variable object
     */
    getVariables(): Record<string, Variable>;
    /**
     * Serialize the Data Provider to a JSON representation
     *
     * @returns a javascript object which represents the `DataProvider`.
     */
    serialize(
      /**
       * the format be the serialized (INA_REPOSITORY_DELTA or INA_REPOSITORY). The `DataProvider` to be serialized
       * from an equivalent such Object.
       */
      sFormat: string
    ): object;
    /**
     * Sets the number of decimal of a measure/query cell
     *
     * @returns the MultiDimDataProvider
     */
    setDecimalPlaces(
      /**
       * number of the decimal palaces to be shown after the separator
       */
      nNumberOfDecimalPlaces: int,
      /**
       * the Member of the Measure Structure
       */
      sMeasureMember: string,
      /**
       * Member of the Non Measure Structure, if this is not given the setting is applied for the whole sMeasureMember
       */
      the: string
    ): this;
    /**
     * Sets the scaling factor of a measure/query cell
     *
     * @returns the MultiDimDataProvider
     */
    setScalingFactor(
      /**
       * the exponential of the scaling factor
       */
      nFactor: int,
      /**
       * the Member of the Measure Structure
       */
      sMeasureMember: string,
      /**
       * the Member of the Non Measure Structure
       */
      sNonMeasureMember: string
    ): this;
    /**
     * Checks whether an InA capability is supported by the backend. Throws an error for unhandled capabilities.
     * List of handled capabilities can be seen in type sap.sac.df.model.Capability
     *
     * @returns returns true, if the capability is supported, else false
     */
    supportsCapability(
      /**
       * the capability name
       */
      sCapability: undefined
    ): boolean;
  }
}

declare module "sap/sac/df/model/Dimension" {
  import BaseObject from "sap/ui/base/Object";

  import MemberFilter from "sap/sac/df/model/MemberFilter";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @since 1.119
   * @experimental
   *
   * Dimension
   * ```javascript
   *
   *  "Name": "",
   *  "TechName": "",
   *  "Description": "",
   *  "Axis": "",
   *  "Type": "",
   *  "HierarchyActive": "",
   *  "HasFilter": "",
   *  "MemberFilter": [],
   *  "SortDirection": "",
   *  "Position": "",
   *  "LastPosition": "",
   *  "IsStructure": "",
   *  "IsMeasureStructure": "",
   *  "ValueType": "",
   *  "SemanticObject": "",
   *  "Members": [
   *    {
   *      "Key": "",
   *      "Name": "",
   *      "TechName": "",
   *      "Description": "",
   *      "SemanticObject": "
   *    }
   *  ]
   * ```
   */
  export default class Dimension extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.sac.df.model.Dimension with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Dimension>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.sac.df.model.Dimension.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Get Structure Members
     *
     * @returns array of structure members
     */
    static getStructureMembers(): any[];
    /**
     * Set Display Type of Dimension
     *
     * @returns } resolving to the Dimension to allow chaining.
     */
    static setDimensionDisplay(
      /**
       * level
       */
      sDisplayType: string
    ): Dimension;
    /**
     * get the list of filters of a dimension
     *
     * @returns list of a range with components
     */
    getMemberFilter(): MemberFilter;
    /**
     * Move a dimension one position down on it's axis
     *
     * @returns the `Dimension` to allow chaining.
     */
    moveDown(): Dimension;
    /**
     * Move a dimension one position up on it's axis
     *
     * @returns the `Dimension` to allow chaining.
     */
    moveUp(): Dimension;
    /**
     * Open a dialog to display and change the settings of a dimension of the `DataProvider`
     *
     * @returns indicator whether the dialog was confirmed or canceled
     */
    openPropertyDialog(): Promise<boolean>;
    /**
     * Open a dialog to display and change the filter on a dimension of the `DataProvider`
     *
     * @returns resolving to a boolean which is false when the dialog is cancelled and true if is was closed
     * with Ok and dynamic filters of the given dimension are updated
     */
    openValueHelpDialog(): Promise<any>;
    /**
     * Set Display Hierarchy
     *
     * @returns resolving to the `Dimension` to allow chaining.
     */
    readHierarchy(
      /**
       * level
       */
      iLevel: int
    ): Dimension;
    /**
     * Remove a drill operation on a dimension member
     *
     * @returns resolving to the `Dimension` to allow chaining.
     */
    removeDrilldown(): Dimension;
    /**
     * Remove the filter of a dimension
     *
     * @returns resolving to the `Dimension` to allow chaining.
     */
    removeMemberFilter(): Dimension;
    /**
     * Set Display Hierarchy
     *
     * @returns resolving to the `Dimension` to allow chaining.
     */
    setDisplayHierarchy(
      /**
       * whether the hierarchy should be activated
       */
      bActive: boolean,
      /**
       * the name of the hierarchy (optional)
       */
      sHierarchyName: string,
      /**
       * the version of the hierarchy (optional)
       */
      sVersion: string
    ): Dimension;
    /**
     * Set the filter for a dimension
     *
     * @returns resolving to the `Dimension` to allow chaining.
     */
    setMemberFilter(
      /**
       * the filter
       */
      oFilter: MemberFilter
    ): Dimension;
    /**
     * Sort the members of a dimension
     *
     * @returns resolving to the `Dimension` to allow chaining.
     */
    sort(
      /**
       * of sorting
       */
      type: /* was: sap.sac.df.types.SortType */ any,
      /**
       * of sorting
       */
      direction: /* was: sap.sac.df.types.SortDirection */ any,
      /**
       * in case of a structure the measure according to which is sorted
       */
      sMember?: string
    ): Promise<Dimension>;
    /**
     * Move the dimension to the columns axis
     *
     * @returns resolving to the Dimension to allow chaining.
     */
    toColumns(): Dimension;
    /**
     * Move the dimension to the rows axis
     *
     * @returns resolving to the Dimension to allow chaining.
     */
    toRows(): Dimension;
  }
}

declare module "sap/sac/df/model/Document" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @since 1.119
   * @experimental
   *
   * Document Object
   */
  export default class Document extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.sac.df.model.Document with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Document>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.sac.df.model.Document.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Creates a document in the document store
     *
     * @returns a promise which resolves to true if create operation is successful, otherwise false.
     */
    createDocument(
      /**
       * the document ID
       */
      sDocumentId: undefined,
      /**
       * the content of the document
       */
      sContent: undefined
    ): Promise<boolean>;
    /**
     * Creates a document ID for a data cell in the result set
     *
     * @returns a promise which resolves with the newly created document ID
     */
    createDocumentId(
      /**
       * the row index
       */
      nRowIndex: int,
      /**
       * the column index
       */
      nColumnIndex: int
    ): Promise<String>;
    /**
     * Deletes a document in the document store
     *
     * @returns a promise which resolves to true if delete operation is successful, otherwise false.
     */
    deleteDocument(
      /**
       * the document ID
       */
      sDocumentId: undefined
    ): Promise<boolean>;
    /**
     * Deletes a document ID for a data cell in the result set
     *
     * @returns a promise which resolves to true if the delete operation is successful, otherwise false.
     */
    deleteDocumentId(
      /**
       * the row index
       */
      nRowIndex: int,
      /**
       * the column index
       */
      nColumnIndex: int
    ): Promise<boolean>;
    /**
     * Gets a document ID of a data cell in the result set
     *
     * @returns a promise which resolves with the document ID
     */
    getDocumentId(
      /**
       * the row index
       */
      nRowIndex: int,
      /**
       * the column index
       */
      nColumnIndex: int
    ): Promise<String>;
    /**
     * Gets the type of DocumentsSupport.
     *
     * @returns DocumentsSupport type
     */
    getDocumentsSupportType(): string;
    /**
     * Retrieves a document from the document store
     *
     * @returns a promise which resolves with the version(s) of the document.
     */
    retrieveDocument(
      /**
       * the document ID
       */
      sDocumentId: undefined,
      /**
       * the version of the document - if version is not supplied, returns all versions.
       */
      sVersion: undefined
    ): Promise<object>;
    /**
     * Retrieves multiple documents from the document store
     *
     * @returns a promise which resolves with all documents and its versions.
     */
    retrieveMultipleDocuments(
      /**
       * the array of document IDs
       */
      aDocumentIds: undefined
    ): Promise<object>;
    /**
     * Updates a document in the document store
     *
     * @returns a promise which resolves to true if update operation is successful, otherwise false.
     */
    updateDocument(
      /**
       * the document ID
       */
      sDocumentId: undefined,
      /**
       * the content of the document
       */
      sContent: undefined
    ): Promise<boolean>;
  }
}

declare module "sap/sac/df/model/Grid" {
  import BaseObject from "sap/ui/base/Object";

  import Document from "sap/sac/df/model/Document";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @experimental (since 1.119)
   *
   * Grid Object
   */
  export default class Grid extends BaseObject {
    constructor();
    /**
     * Documents
     */
    Documents: Document;

    /**
     * Creates a new subclass of class sap.sac.df.model.Grid with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Grid>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.sac.df.model.Grid.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Get the list of the jump targets associated to a cell defined via the Report-To-Report Interface.
     *
     * @returns resolving to the List of jump targets.
     */
    getRRITargets(
      /**
       * Row of the data cell
       */
      iRowIndex: int,
      /**
       * Column of the data cell
       */
      iColumnIndex: int
    ): Promise<any>;
  }
}

declare module "sap/sac/df/model/MemberFilter" {
  import BaseObject from "sap/ui/base/Object";

  import FilterOperator from "sap/ui/model/FilterOperator";

  import Metadata from "sap/ui/base/Metadata";

  import Filter from "sap/ui/model/Filter";

  /**
   * @since 1.119
   * @experimental
   *
   * Member Filter
   * ```javascript
   *
   *  "Key": [],
   *  "InternalKey": [],
   *  "Text": [],
   *  "Operator": "",
   *  "Hierarchy": { }
   * ```
   */
  export default class MemberFilter extends BaseObject {
    constructor(
      /**
       * array of (display) keys
       */
      aKey: string[],
      /**
       * array of internal keys
       */
      aInternalKey: string[],
      /**
       * array of texts
       */
      aText: string[],
      /**
       * filter operator
       */
      sOperator?: FilterOperator | keyof typeof FilterOperator,
      /**
       * hierarchy object
       */
      oHierarchyInfo?: Object
    );

    /**
     * Create a member filter object from firefly
     *
     * @returns a Member Filter object
     */
    static createFromFFMemberFilter(
      /**
       * array of firefly member filters
       */
      aFFMemberFilter: any[]
    ): MemberFilter[];
    /**
     * Create a member filter object from filter operation
     *
     * @returns a Member Filter object
     */
    static createFromFilterOperation(
      /**
       * the name of the Variable to search
       */
      filterOperation: object
    ): MemberFilter;
    /**
     * Creates a new subclass of class sap.sac.df.model.MemberFilter with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MemberFilter>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.sac.df.model.MemberFilter.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Create a member filter object from filter
     *
     * @returns a Member Filter object
     */
    static transformFromFilterToMemberFilter(
      /**
       * object
       */
      oFilter: Filter
    ): MemberFilter;
    /**
     * Create a member filter object from filter
     *
     * @returns a Member Filter object
     */
    static transformFromMemberFilterToFilter(
      /**
       * object
       */
      oFilter: MemberFilter,
      /**
       * path to object
       */
      sPath: string
    ): Filter;
    /**
     * Return a member filter object as {@link sap.ui.model.Filter}
     *
     * @returns filter object
     */
    transformToFilter(): Filter;
  }
}

declare module "sap/sac/df/model/MultiDimModel" {
  import Model from "sap/ui/model/Model";

  import DataProvider from "sap/sac/df/model/DataProvider";

  import VariableGroup from "sap/sac/df/model/VariableGroup";

  import Metadata from "sap/ui/base/Metadata";

  import Event from "sap/ui/base/Event";

  /**
   * @experimental
   *
   * Model implementation for InA provider
   *
   * The MultiDimModel can populate it's exposed data via Binding to Controls. The structure of the exposed
   * data, mainly via the objects `DataProviders`, `VariableGroups` and `Messages`.
   */
  export default class MultiDimModel extends Model {
    /**
     * Constructor for a new MultiDimModel.
     *
     * The Olap Model allows to access and change data from servers providing the InA Protocol.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: object
    );
    /**
     * Data Providers
     */
    DataProviders: DataProvider;

    /**
     * Variable Groups
     */
    VariableGroups: VariableGroup;

    /**
     * Creates a new subclass of class sap.sac.df.model.MultiDimModel with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MultiDimModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.sac.df.model.MultiDimModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Adds a new query as a new data provider
     *
     * @returns Promise which resolves the Data Provider that was created
     */
    addDataProvider(
      /**
       * the name of the new data provider
       */
      sDataProviderName: string,
      /**
       * the name of the query which the data provider is supposed to expose
       */
      sQueryName: string,
      /**
       * the name of the system in the landscape
       */
      sSystem?: string,
      /**
       * the name of the package
       */
      sPackage?: string,
      /**
       * the name of the schema
       */
      sSchema?: string,
      /**
       * the name of the type of the datasource
       */
      sType?: string
    ): Promise<DataProvider>;
    /**
     * Adds a variable group to the model
     *
     * A Variable group defines what variables of teh underlying DataProvider behave in as one variable The
     * group is defined by a name and a Rule. Rule is a function which accept the variable definition and decides
     * if the variable has to be part of te group The first added variable becomes automatically the MergedVariable.
     *
     * The VariableGroup can be accessed/bound via the properties of MultiDimModel a
     *
     * @returns Promise which resolves the Variable Group that was created
     */
    addVariableGroup(
      /**
       * the name of the variable
       */
      sVariableGroupName: string,
      /**
       * function returning a boolean
       */
      fnRule: Function,
      /**
       * additional properties
       */
      oProperties: Object
    ): Promise<VariableGroup>;
    /**
     * Resets the messages
     *
     * @returns for chaining
     */
    clearMessages(
      /**
       * if also property bindings have to be updated
       */
      bUpdateBindings: undefined
    ): MultiDimModel;
    /**
     * Updates the MultiDimModel from the given the model state including all aggregated `DataProvider`s
     *
     * @returns Promise Promise which resolves to the updated instance of the OlapModel.
     */
    deserialize(
      /**
       * the JSON object containing the persisted state of th MultiDimModel to be applied.
       */
      oModelState: object,
      /**
       * the format be the deserialized (INA_REPOSITORY_DELTA or INA_REPOSITORY).
       */
      sFormat: string
    ): undefined;
    /**
     * Fires event {@link #event:dataProviderAdded dataProviderAdded} to attached listeners.
     *
     * @returns the MultiDimModel
     */
    fireDataProviderAdded(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): MultiDimModel;
    /**
     * Fires event {@link #event:dataProviderUpdated dataProviderUpdated} to attached listeners.
     *
     * @returns the MultiDimModel
     */
    fireDataProviderUpdated(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): MultiDimModel;
    /**
     * Get a Data Provider
     *
     * @returns DataProvider
     */
    getDataProvider(
      /**
       * the name of the new DataProvider
       */
      sDataProviderName: string
    ): DataProvider;
    /**
     * Get all data providers
     *
     * @returns object of all Data Providers
     */
    getDataProviders(): Record<string, DataProvider>;
    /**
     * Get a variable group
     *
     * @returns variable group object
     */
    getVariableGroup(
      /**
       * the name of the variable
       */
      sVariableGroupName: string
    ): VariableGroup;
    /**
     * Get all variable groups
     *
     * @returns variable group object
     */
    getVariableGroups(): Record<string, VariableGroup>;
    /**
     * Ensures all aggregated DataProviders are logged off.
     *
     * @returns Promise which resolves when logoff is finished.
     */
    logoff(): Promise<void>;
    /**
     * Remove existing data provider from model.
     *
     * @returns Promise which resolves when the removing has been finished
     */
    removeDataProvider(
      /**
       * the name of the DataProvider to be removed
       */
      sDataProviderName: string
    ): Promise<void>;
    /**
     * Remove a variable group from the model
     *
     * @returns Promise which resolves when the removing has been finished
     */
    removeVariableGroup(
      /**
       * the name of the variable
       */
      sVariableGroupName: string
    ): Promise<void>;
    /**
     * Reset the Olap Model to the default query
     */
    resetModel(): void;
    /**
     * Serialize the Model with all aggregated `DataProvider` to a JSON representation
     *
     * @returns a javascript object which represents the `MultiDimModel`.
     */
    serialize(
      /**
       * the format be the serialized (INA_REPOSITORY_DELTA or INA_REPOSITORY). The `MultiDimModel` to be serialized
       * from an equivalent such Object.
       */
      sFormat: string
    ): object;
    /**
     * Synchronizes all aggregated DataProviders by fetching their ResultSet.
     *
     * If the user does not choose an Analytic Query, then the promise is rejected
     *
     * @returns the MultiDimModel, to allow chaining
     */
    synchronize(
      /**
       * List of data provider that are to be synchronized (all if not supplied)
       */
      aDataProviderNames: string[]
    ): Promise<MultiDimModel>;
  }

  export interface MultiDimModel$DataProviderAddedEventParameters {}

  export type MultiDimModel$DataProviderAddedEvent = Event<
    MultiDimModel$DataProviderAddedEventParameters,
    MultiDimModel
  >;

  export interface MultiDimModel$DataProviderUpdatedEventParameters {}

  export type MultiDimModel$DataProviderUpdatedEvent = Event<
    MultiDimModel$DataProviderUpdatedEventParameters,
    MultiDimModel
  >;
}

declare module "sap/sac/df/model/QueryInfo" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @since 1.119
   * @experimental
   *
   * Query Info providing the following information
   * ```javascript
   *
   *  "QueryTitle": "",
   *  "QueryName": "",
   *  "QueryType": "",
   *  "SystemName": "",
   *  "CreatedBy": "",
   *  "CreatedOn": "",
   *  "QueryDueDateText": "",
   *  "CreatedOnText": "",
   *  "QueryDueDate": "",
   *  "ResultAlignmentRows": "",
   *  "ResultAlignmentColumns": "",
   *  "LastUpdated": "",
   *  "LastUpdatedBy": "",
   *  "LastUpdatedText": ""
   * ```
   */
  export default class QueryInfo extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.sac.df.model.QueryInfo with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, QueryInfo>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.sac.df.model.QueryInfo.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/sac/df/model/Variable" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  import Filter from "sap/ui/model/Filter";

  /**
   * @since 1.119
   * @experimental
   *
   * Variable
   * ```javascript
   *
   * "Name": "",
   * "Dimension": "",
   * "ValueType": "",
   * "VariableType": "",
   * "Description": "",
   * "Mandatory": "",
   * "SupportsMultipleValues": "",
   * "TechName": "",
   * "InputEnabled": "",
   * "Position": ""
   * "SupportsValueHelp": "",
   * "DataProviderName": "",
   * "MemberFilter": []
   * ```
   */
  export default class Variable extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.sac.df.model.Variable with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Variable>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.sac.df.model.Variable.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Open a dialog to display and change the filter on a dimension of the `DataProvider`
     *
     * @returns resolving to a boolean which is false when the dialog is cancelled and true if is was closed
     * with Ok and dynamic filters of the given dimension are updated
     */
    openValueHelpDialog(
      /**
       * if the model update should be suppressed
       */
      bSuppressModelUpdate: boolean
    ): Promise<any>;
    /**
     * Performs the search in values of a given Variable
     *
     * @returns array members found values
     */
    searchMember(
      /**
       * string to search for
       */
      sSearchString: string,
      /**
       * if a fuzzy search is performed
       */
      bFuzzy: boolean,
      /**
       * if to search in text/description (default true)
       */
      bText: boolean,
      /**
       * if to search in key/id (default true)
       */
      bKey: boolean,
      /**
       * maximal number of search results (default 1)
       */
      iMaxNumberOfResults: int,
      /**
       * if to provide the parents of the search result for hierarchical variables (only relevant if iMaxNumberOfResults
       * is set)
       */
      bRequestParents: boolean
    ): Promise</* was: sap.sac.df.MemberFilter */ any[]>;
    /**
     * Set value of the variable
     */
    setMemberFilter(oFilter: Filter): void;
  }
}

declare module "sap/sac/df/model/VariableGroup" {
  import BaseObject from "sap/ui/base/Object";

  import Variable from "sap/sac/df/model/Variable";

  import Metadata from "sap/ui/base/Metadata";

  import MemberFilter from "sap/sac/df/model/MemberFilter";

  import Filter from "sap/ui/model/Filter";

  /**
   * @since 1.119
   * @experimental
   *
   * Variable Group
   * ```javascript
   *
   * "Name": "string",
   * "MergedVariable": { }
   * ```
   */
  export default class VariableGroup extends BaseObject {
    constructor();
    /**
     * Merged Variable
     */
    MergedVariable: Variable;

    /**
     * Name
     */
    Name: string;

    /**
     * Creates a new subclass of class sap.sac.df.model.VariableGroup with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, VariableGroup>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.sac.df.model.VariableGroup.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Opens the value help dialog so the user choose a value for a VariableGroup After the value is selected
     * only teh VariableGroup.MergedVariable is updated. The variables of the aggregated DataProviders are updated
     * with the next ResultSet fetch
     *
     * @returns to indicate if the VariableGroup has been updated
     */
    openValueHelpDialog(): Promise<boolean>;
    /**
     * Performs the search in values of a given Variable
     *
     * @returns array with found values
     */
    searchMember(
      /**
       * string to search for
       */
      sSearchString: string,
      /**
       * if a fuzzy search is performed
       */
      bFuzzy: boolean,
      /**
       * if to search in text/description (default true)
       */
      bText: boolean,
      /**
       * if to search in key/id (default true)
       */
      bKey: boolean,
      /**
       * maximal number of search results (default 1)
       */
      iMaxNumberOfResults: int,
      /**
       * if to provide the parents of the search result for hierarchical variables (only relevant if iMaxNumberOfResults
       * is set)
       */
      bRequestParents: boolean
    ): Promise<MemberFilter[]>;
    /**
     * Sets new value
     *
     * @returns Promise which resolve when the value is set
     */
    setMemberFilter(
      /**
       * filter object
       */
      oFilter: Filter
    ): undefined;
  }
}

declare module "sap/sac/df/olap/MultiDimDataProvider" {
  import MultiDimModel from "sap/sac/df/olap/MultiDimModel";

  /**
   * @deprecated (since 1.119) - Please use @link{sap.sac.df.model.DataProvider}.
   * @experimental
   *
   * A `MultiDimDataProvider` is a Analytical query exposed via an OLAP engine and accessed via InA protocol
   * HANA - MDS BW Query. In BW it could be done via a CDS view that is annotated as an AnalyticQuery.
   *
   * Instances of this class should only be created by the {sap.sac.df.olap.MultiDimModel}. The `MultiDimModel`
   * populates it's exposed data via Binding to Controls. The structure of data exposed by a MultiDimDataProvider
   * is as follows:
   *
   * **Structure of Exposed Data**
   *
   *
   * 	 - `Grid/Cells`: The list of all `Cell` representing the data retrieved via `MultiDimDataProvider`
   * 	 - `FreeDimensions`: The list of all Dimensions lying in the Free Axis
   * 	`Name`: the external name of the dimension  `Description`: the language dependant description of
   * the dimension  `IsStructure`: boolean flag indicating whether the dimension is a structure
   *
   * 	 - RowsDimensions: The list of all Dimensions lying on the Rows Axis
   * 	 Name: the external name of the dimension  Description: the language dependant description of the
   * dimension  IsStructure: boolean flag indicating whether the dimension is a structure   *
   * 	 - ColumnsDimensions: The list of all Dimensions lying on the Columns Axis
   * 	 Name: the external name of the dimension  Description: the language dependant description of the
   * dimension  IsStructure: boolean flag indicating whether the dimension is a structure
   * 	 - Conditions: list of conditions (result set filters)
   * 	 - Exceptions: list of exceptions (conditional formats)
   * 	 - StructureMembers: list of structure members (collection of Members of all Structure Dimension)
   */
  export default class MultiDimDataProvider {
    /**
     * Constructor for a new MultiDimDataProvider.
     *
     * A MultiDimDataProvider represents a navigable queryManager and allows to access and change data from
     * servers providing the InA
     * Protocol.
     */
    constructor(
      /**
       * the model to which the MultiDimDataProvider belongs
       */
      oMultiDimModel: MultiDimModel,
      /**
       * name of the MultiDimDataProvider
       */
      sMultiDimDataProviderName: string,
      /**
       * the firefly application associated to the `MultiDimModel`
       */
      oApplication: object,
      /**
       * the firefly queryManager that is wrapped by the `MultiDimDataProvider`
       */
      oQueryManager: object
    );

    /**
     * add a new condition (aka resultset filter).
     *
     * @returns resolving to the `MultiDimDataProvider` to allow chaining.
     */
    addCondition(
      /**
       * Condition Definiton
       */
      oData: object,
      /**
       * Target state of the condition
       */
      bActive: boolean
    ): Promise<this>;
    /**
     * Do a drill operation on a dimension member on an Axis
     *
     * @returns resolving to the `MultiDimDataProvider` to allow chaining.
     */
    drill(
      /**
       * the external name of the Dimension
       */
      sDim: string,
      /**
       * the Tuple Index of the member in the resultset.
       */
      nIndex: int
    ): this;
    /**
     * Gets the scaling factor of a measure or data cell
     *
     * @returns the current decimal places setting
     */
    getDecimalPlaces(
      /**
       * the Member of the Measure Structure
       */
      sMeasureMember: string,
      /**
       * the Member of the Non Measure Structure, if this is not given the value for the sMeasureMember is returned
       */
      sNonMeasureMember: string
    ): int;
    /**
     * get the list of filters of a dimension
     *
     * @returns list of a range with components
     * 	`Low`: The Low value of the range `High`: The High value of the range `Operator`: The Operator:
     * EQ,LE,..,BT
     */
    getFilterOfDim(
      /**
       * the name of the dimension from which the filter is retrieved
       */
      sDim: string
    ): object[];
    /**
     * get the current resultset from the InA Server
     *
     * @returns resolving to the `MultiDimDataProvider` to allow chaining.
     */
    getResultSet(): Promise<this>;
    /**
     * get the list of the jump targets associated to a datacell defined via the report report interface.
     *
     * @returns resolving to the List of jump targets.
     */
    getRRITargets(
      /**
       * Row of the data cell
       */
      nRow: int,
      /**
       * Column of the data cell
       */
      nColumn: int
    ): Promise<this>;
    /**
     * Gets the scaling factor of a measure
     *
     * @returns the exponent of the scaling factor in Base 10
     */
    getScalingFactor(
      /**
       * the Member of the Measure Structure
       */
      sMeasureMember: string,
      /**
       * the Member of the Non Measure Structure
       */
      sNonMeasureMember: string
    ): int;
    /**
     * hasVariable Checks whether a Variable is influencing the MultiDimDataProvider
     *
     * @returns Whether the vairable influences the MultiDimDataProvider
     */
    hasVariable(
      /**
       * Name of the Variable
       */
      the: string
    ): boolean;
    /**
     * move a dimension one position down on it's axis
     *
     * @returns the `MultiDimDataProvider` to allow chaining.
     */
    moveDown(
      /**
       * name of the dimension
       */
      sName: string,
      /**
       * Target state of the condition
       */
      bActive: boolean
    ): this;
    /**
     * move a dimension one position up on it's axis
     *
     * @returns the `MultiDimDataProvider` to allow chaining.
     */
    moveUp(
      /**
       * name of the dimension
       */
      sName: string,
      /**
       * Target state of the condition
       */
      bActive: boolean
    ): this;
    /**
     * Open a dialog that allows to display and change the property of an `Axis` of the `MultiDimDataProvider`.
     *
     * @returns indicator whether the dialog was confirmed or canceled
     */
    openAxisDialog(
      /**
       * the external name of the Dimension
       */
      sDim: string
    ): Promise<boolean>;
    /**
     * Open a dialog that allows to display and change the property of a `Query Cell` of the `MultiDimDataProvider`.
     *
     * @returns resolving to the `MultiDimDataProvider` to allow chaining. In case that a the Currency Translation
     * Settings have been changed in the dialog, the new resultset was retrieved before the promise gets resolved.
     */
    openCellDialog(
      /**
       * the external name of the first structure
       */
      sDim1?: string,
      /**
       * the external name of the member of the first structure
       */
      sMem1?: string,
      /**
       * the external name of the second structure
       */
      sDim2?: string,
      /**
       * the external name of the member of the second structure
       */
      sMem2?: string
    ): Promise<this>;
    /**
     * Open a dialog that allows to display and change the currency translation settings of the `MultiDimDataProvider`.
     *
     * @returns indicator whether the dialog was confirmed or canceled in the dialog, the new resultset was
     * retrieved before the promise gets resolved.
     */
    openCurrencyTranslationDialog(): Promise<boolean>;
    /**
     * Open a dialog to display and change the settings of a dimension of the `MultiDimDataProvider`
     *
     * @returns indicator whether the dialog was confirmed or canceled
     */
    openDimDialog(
      /**
       * the external name of the Dimension
       */
      sDim: string
    ): Promise<boolean>;
    /**
     * Open a dialog to display and change the filter on a dimension of the `MultiDimDataProvider`
     *
     * @returns resolving to a boolean which is false when the dialog is cancelled and true if is was closed
     * with Ok and dynamic filters of the given dimension are updated
     */
    openSelector(
      /**
       * the external name of the Dimension
       */
      sDimensionName: string
    ): Promise<any>;
    /**
     * Remove the filter of a dimension
     *
     * @returns resolving to the `MultiDimDataProvider` to allow chaining.
     */
    removeFilter(
      /**
       * the external name
       */
      sDim: string
    ): this;
    /**
     * Distribute the dimension among the rows and columns
     *
     * @returns resolving to the `MultiDimDataProvider` to allow chaining. In case that a the Currency Translation
     * Settings have been changed in the dialog, the new resultset was retrieved before the promise gets resolved.
     */
    setAxesLayout(
      /**
       * an Object containing a `rows` member referencing a string array containing the names of the dimensions
       * and a `columns` member referencing a string array containing the dimension on the columns. The order
       * in the array control the positon on the axis.
       */
      mLayout: object
    ): this;
    /**
     * Sets the number of decimal of a measure/query cell
     *
     * @returns the MultiDimDataProvider
     */
    setDecimalPlaces(
      /**
       * number of the decimal palaces to be shown after the separator
       */
      nNumberOfDecimalPlaces: int,
      /**
       * the Member of the Measure Structure
       */
      sMeasureMember: string,
      /**
       * Member of the Non Measure Structure, if this is not given the setting is applied for the whole sMeasureMember
       */
      the: string
    ): this;
    /**
     * Set Display Hierachy
     *
     * @returns resolving to the `MultiDimDataProvider` to allow chaining.
     */
    setDisplayHierarchy(
      /**
       * the external name of the structure on which the new restriction is created
       */
      sDim: string,
      /**
       * whether the hierarchy should be activated
       */
      bActive: boolean,
      /**
       * the name of the hierarchy (optional)
       */
      sHierachy: string,
      /**
       * the version of the hierarchy (optional)
       */
      sVersion: string
    ): this;
    /**
     * Set the filter for a dimension
     *
     * @returns {{this} resolving to the `MultiDimDataProvider` to allow chaining.
     */
    setFilter(
      /**
       * the external name
       */
      sDim: string,
      /**
       * the filter
       */
      oFilter: object
    ): undefined;
    /**
     * Sets the scaling factor of a measure/query cell
     *
     * @returns the MultiDimDataProvider
     */
    setScalingFactor(
      /**
       * the exponential of the scaling factor
       */
      nFactor: int,
      /**
       * the Member of the Measure Structure
       */
      sMeasureMember: string,
      /**
       * the Member of the Non Measure Structure
       */
      sNonMeasureMember: string
    ): this;
    /**
     * Sort the members of a dimension
     *
     * @returns resolving to the `MultiDimDataProvider` to allow chaining.
     */
    sort(
      /**
       * the external name of the Dimension
       */
      sDim: string,
      /**
       * of sorting
       */
      type: /* was: sap.sac.df.types.SortType */ any,
      /**
       * of sorting
       */
      direction: /* was: sap.sac.df.types.SortDirection */ any,
      /**
       * in case of a structure the measure according to which is sorted
       */
      sMember?: string
    ): Promise<this>;
    /**
     * submit the value of the input enabled queries to the InA Server
     *
     * @returns resolving to the `MultiDimDataProvider` to allow chaining.
     */
    submitVariables(): Promise<this>;
    /**
     * retrieve the data of the current naviation state `MultiDimDataProvider` from the InA Server.
     *
     * @returns to allow chaining.
     */
    synchronize(): Promise<this>;
    /**
     * Move a dimension to the columns axis
     *
     * @returns resolving to the `MultiDimDataProvider` to allow chaining.
     */
    toColumns(
      /**
       * the external name of the Dimension
       */
      sDim: string
    ): this;
    /**
     * Move a dimension to the rows axis
     *
     * @returns resolving to the `MultiDimDataProvider` to allow chaining.
     */
    toRows(
      /**
       * the external name of the Dimension
       */
      sDim: string
    ): this;
  }
}

declare module "sap/sac/df/olap/MultiDimModel" {
  import Model from "sap/ui/model/Model";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @deprecated (since 1.119) - Please use @link{sap.sac.df.model.MultiDimModel}.
   * @experimental
   *
   * Model implementation for InA provider
   *
   * The MultiDimModel can populate it's exposed data via Binding to Controls. The structure of the exposed
   * data is as follows: **Structure of Exposed Data**
   *
   *
   * 	 - DataProvider: The associative array of all `DataProvider` aggregated by the   VariableGroups:
   *     The associative array of registered Variable Groups Messages: The list of all messages posted by
   *     the Analytical Engine
   */
  export default class MultiDimModel extends Model {
    /**
     * Constructor for a new OlapMode.
     *
     * The Olap Model allows to access and change data from servers providing the InA Protocol.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.sac.df.olap.MultiDimModel with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MultiDimModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.sac.df.olap.MultiDimModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Gets current value of property {@link #getApi api}.
     *
     * @returns Value of property `api`
     */
    getApi(): undefined;
    /**
     * Sets a new value for property {@link #getApi api}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setApi(
      /**
       * New value for property `api`
       */
      sApi: undefined
    ): this;
  }
}

declare module "sap/sac/df/types/SystemType" {
  /**
   * System Type of an InA System
   */
  enum SystemType {
    /**
     * The ABAP analytic engine
     */
    ABAP_MDS = "ABAP_MDS",
    /**
     * The BW analytic engine
     */
    BW = "BW",
    /**
     * The Data Warehouce Cloud analytic engine
     */
    DWC = "DWC",
    /**
     * The HANA/MDS analytic engine
     */
    HANA = "HANA",
  }
  export default SystemType;
}

declare namespace sap {
  interface IUI5DefineDependencyNames {
    "sap/sac/df/FlexAnalysis": undefined;

    "sap/sac/df/FlexAnalysisPanel": undefined;

    "sap/sac/df/library": undefined;

    "sap/sac/df/model/AxesLayout": undefined;

    "sap/sac/df/model/DataProvider": undefined;

    "sap/sac/df/model/Dimension": undefined;

    "sap/sac/df/model/Document": undefined;

    "sap/sac/df/model/Grid": undefined;

    "sap/sac/df/model/MemberFilter": undefined;

    "sap/sac/df/model/MultiDimModel": undefined;

    "sap/sac/df/model/QueryInfo": undefined;

    "sap/sac/df/model/Variable": undefined;

    "sap/sac/df/model/VariableGroup": undefined;

    "sap/sac/df/olap/MultiDimDataProvider": undefined;

    "sap/sac/df/olap/MultiDimModel": undefined;

    "sap/sac/df/types/SystemType": undefined;
  }
}
